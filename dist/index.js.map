{"version":3,"sources":["../src/index.js"],"names":["wallet","require","seedPrefix","minFactorValue","maxFactorValue","generateSeed","username","password","randomFactor","getRandomFactor","value","Math","floor","random","toString","makeRangeIterator","start","end","step","nextIndex","iterationCount","rangeIterator","next","counter","done","createKeyPair","generateKeys","seed","token","w","generate","privateKey","getPrivateKeyString","publicKey","getPublicKeyString","result","restoreKeyPair","pubKey","iterator","console","log","error"],"mappings":";;;;;;;AACA;;AACA,IAAIA,SAASC,QAAQ,cAAR,CAAb;;AAEA,IAAIC,aAAa,kBAAjB;AACA,IAAIC,iBAAiB,IAArB;AACA,IAAIC,iBAAiB,IAArB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,QAAX,EAAqBC,YAArB,EAAsC;AACvD,WAAON,aAAaI,QAAb,GAAwB,GAAxB,GAA8BC,QAA9B,GAAyC,GAAzC,GAA+CC,YAAtD;AACH,CAFD;;AAIA,IAAMC,kBAAkB,SAAlBA,eAAkB,GAAM;AAC5B,QAAIC,QAAQC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiBT,iBAAiBD,cAAlC,CAAX,IAAgEA,cAA5E;AACA,WAAOO,MAAMI,QAAN,EAAP;AACD,CAHD;;AAKA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AACzC,QAAIC,YAAYH,KAAhB;AACA,QAAII,iBAAiB,CAArB;;AAEA,QAAMC,gBAAgB;AACnBC,cAAM,gBAAW;AACb,gBAAIC,gBAAJ;AACA,gBAAIJ,aAAaF,GAAjB,EAAsB;AAClBM,0BAAU,EAAEb,OAAOS,SAAT,EAAoBK,MAAM,KAA1B,EAAV;AACAL,6BAAaD,IAAb;AACAE;AACA,uBAAOG,OAAP;AACH;AACD,mBAAO,EAAEb,OAAOU,eAAeN,QAAf,EAAT,EAAoCU,MAAM,IAA1C,EAAP;AACH;AAVkB,KAAtB;AAYA,WAAOH,aAAP;AACH;;AAED;AACA,IAAMI,gBAAgB,SAAhBA,aAAgB,CAACnB,QAAD,EAAWC,QAAX,EAAwB;AAC5C,QAAIC,eAAeC,iBAAnB;AACA,WAAOiB,aAAapB,QAAb,EAAuBC,QAAvB,EAAiCC,YAAjC,CAAP;AACD,CAHD;;AAKA,IAAMkB,eAAe,SAAfA,YAAe,CAACpB,QAAD,EAAWC,QAAX,EAAqBC,YAArB,EAAsC;AACvD,QAAImB,OAAOtB,aAAaC,QAAb,EAAuBC,QAAvB,EAAiCC,YAAjC,CAAX;AACA,QAAIoB,QAAQ,mBAAOD,IAAP,CAAZ;AACA,QAAME,IAAI7B,OAAO8B,QAAP,CAAgB,KAAhB,EAAuBF,KAAvB,CAAV;AACA,QAAIG,aAAaF,EAAEG,mBAAF,EAAjB;AACA,QAAIC,YAAYJ,EAAEK,kBAAF,EAAhB;AACA,QAAIC,SAAS;AACTF,mBAAWA,SADF;AAETF,oBAAYA,UAFH;AAGTvB,sBAAcA;AAHL,KAAb;AAKA,WAAO2B,MAAP;AACH,CAZD;;AAcA;AACA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAAC9B,QAAD,EAAWC,QAAX,EAAqB8B,MAArB,EAAgC;AACrD,QAAIC,WAAWvB,kBAAkBZ,iBAAiB,CAAnC,EAAsCC,cAAtC,EAAsD,CAAtD,CAAf;AACA,QAAImB,UAAUe,SAAShB,IAAT,EAAd;AACA,WAAO,CAACC,QAAQC,IAAhB,EAAsB;AACnB,YAAIW,SAAST,aAAapB,QAAb,EAAuBC,QAAvB,EAAiCgB,QAAQb,KAAzC,CAAb;AACA,YAAIyB,OAAOF,SAAP,KAAqBI,MAAzB,EAAgC;AAC9BE,oBAAQC,GAAR,CAAY,YAAYjB,QAAQb,KAAhC;AACA,mBAAOyB,MAAP;AACD;AACDZ,kBAAUe,SAAShB,IAAT,EAAV;AACF;AACD,WAAO,EAAEmB,OAAO,gDAAT,EAAP;AACD,CAZD;;QAeIhB,a,GAAAA,a;QAAeW,c,GAAAA,c;QAAgBV,Y,GAAAA,Y","file":"index.js","sourcesContent":["\nimport { sha256, sha224 } from 'js-sha256';\nvar wallet = require('./eth-wallet');\n\nlet seedPrefix = 'taptrust-wallet-';\nlet minFactorValue = 1000;\nlet maxFactorValue = 5000;\n\nconst generateSeed = (username, password, randomFactor) => {\n    return seedPrefix + username + '-' + password + '-' + randomFactor;\n}\n\nconst getRandomFactor = () => {\n  let value = Math.floor(Math.random() * (maxFactorValue - minFactorValue)) + minFactorValue;\n  return value.toString();\n}\n\nfunction makeRangeIterator(start, end, step) {\n    let nextIndex = start;\n    let iterationCount = 0;\n\n    const rangeIterator = {\n       next: function() {\n           let counter;\n           if (nextIndex <= end) {\n               counter = { value: nextIndex, done: false }\n               nextIndex += step;\n               iterationCount++;\n               return counter;\n           }\n           return { value: iterationCount.toString(), done: true }\n       }\n    };\n    return rangeIterator;\n}\n\n// function for creating new keypair from username/password credentials\nconst createKeyPair = (username, password) => {\n  let randomFactor = getRandomFactor();\n  return generateKeys(username, password, randomFactor);\n}\n\nconst generateKeys = (username, password, randomFactor) => {\n    let seed = generateSeed(username, password, randomFactor);\n    let token = sha256(seed);\n    const w = wallet.generate(false, token);\n    let privateKey = w.getPrivateKeyString();\n    let publicKey = w.getPublicKeyString();\n    let result = {\n        publicKey: publicKey,\n        privateKey: privateKey,\n        randomFactor: randomFactor\n    }\n    return result;\n};\n\n// function for restoring already generated keypair with a known public key\nconst restoreKeyPair = (username, password, pubKey) => {\n  let iterator = makeRangeIterator(minFactorValue - 1, maxFactorValue, 1);\n  let counter = iterator.next();\n  while (!counter.done) {\n     let result = generateKeys(username, password, counter.value);\n     if (result.publicKey === pubKey){\n       console.log('value: ' + counter.value);\n       return result;\n     }\n     counter = iterator.next();\n  }\n  return { error: 'Keypair matching provided public key not found' };\n}\n\nexport {\n    createKeyPair, restoreKeyPair, generateKeys\n};\n"]}